// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace GstSharp {

	using System;
	using System.Runtime.InteropServices;

#region Autogenerated code
	[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
	internal delegate void IteratorCopyFunctionNative(IntPtr it, IntPtr copy);

	internal class IteratorCopyFunctionInvoker {

		IteratorCopyFunctionNative native_cb;
		IntPtr __data;
		GLib.DestroyNotify __notify;

		~IteratorCopyFunctionInvoker ()
		{
			if (__notify == null)
				return;
			__notify (__data);
		}

		internal IteratorCopyFunctionInvoker (IteratorCopyFunctionNative native_cb) : this (native_cb, IntPtr.Zero, null) {}

		internal IteratorCopyFunctionInvoker (IteratorCopyFunctionNative native_cb, IntPtr data) : this (native_cb, data, null) {}

		internal IteratorCopyFunctionInvoker (IteratorCopyFunctionNative native_cb, IntPtr data, GLib.DestroyNotify notify)
		{
			this.native_cb = native_cb;
			__data = data;
			__notify = notify;
		}

		internal Gst.IteratorCopyFunction Handler {
			get {
				return new Gst.IteratorCopyFunction(InvokeNative);
			}
		}

		void InvokeNative (Gst.Iterator it, Gst.Iterator copy)
		{
			native_cb (it == null ? IntPtr.Zero : it.Handle, copy == null ? IntPtr.Zero : copy.Handle);
		}
	}

	internal class IteratorCopyFunctionWrapper {

		public void NativeCallback (IntPtr it, IntPtr copy)
		{
			try {
				managed (it == IntPtr.Zero ? null : (Gst.Iterator) GLib.Opaque.GetOpaque (it, typeof (Gst.Iterator), false), copy == IntPtr.Zero ? null : (Gst.Iterator) GLib.Opaque.GetOpaque (copy, typeof (Gst.Iterator), false));
				if (release_on_call)
					gch.Free ();
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		bool release_on_call = false;
		GCHandle gch;

		public void PersistUntilCalled ()
		{
			release_on_call = true;
			gch = GCHandle.Alloc (this);
		}

		internal IteratorCopyFunctionNative NativeDelegate;
		Gst.IteratorCopyFunction managed;

		public IteratorCopyFunctionWrapper (Gst.IteratorCopyFunction managed)
		{
			this.managed = managed;
			if (managed != null)
				NativeDelegate = new IteratorCopyFunctionNative (NativeCallback);
		}

		public static Gst.IteratorCopyFunction GetManagedDelegate (IteratorCopyFunctionNative native)
		{
			if (native == null)
				return null;
			IteratorCopyFunctionWrapper wrapper = (IteratorCopyFunctionWrapper) native.Target;
			if (wrapper == null)
				return null;
			return wrapper.managed;
		}
	}
#endregion
}
