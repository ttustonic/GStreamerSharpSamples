// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace GstSharp {

	using System;
	using System.Runtime.InteropServices;

#region Autogenerated code
	[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
	internal delegate bool StructureFilterMapFuncNative(uint field_id, IntPtr value, IntPtr user_data);

	internal class StructureFilterMapFuncInvoker {

		StructureFilterMapFuncNative native_cb;
		IntPtr __data;
		GLib.DestroyNotify __notify;

		~StructureFilterMapFuncInvoker ()
		{
			if (__notify == null)
				return;
			__notify (__data);
		}

		internal StructureFilterMapFuncInvoker (StructureFilterMapFuncNative native_cb) : this (native_cb, IntPtr.Zero, null) {}

		internal StructureFilterMapFuncInvoker (StructureFilterMapFuncNative native_cb, IntPtr data) : this (native_cb, data, null) {}

		internal StructureFilterMapFuncInvoker (StructureFilterMapFuncNative native_cb, IntPtr data, GLib.DestroyNotify notify)
		{
			this.native_cb = native_cb;
			__data = data;
			__notify = notify;
		}

		internal Gst.StructureFilterMapFunc Handler {
			get {
				return new Gst.StructureFilterMapFunc(InvokeNative);
			}
		}

		bool InvokeNative (uint field_id, GLib.Value value)
		{
			IntPtr native_value = GLib.Marshaller.StructureToPtrAlloc (value);
			bool __result = native_cb (field_id, native_value, __data);
			Marshal.FreeHGlobal (native_value);
			return __result;
		}
	}

	internal class StructureFilterMapFuncWrapper {

		public bool NativeCallback (uint field_id, IntPtr value, IntPtr user_data)
		{
			try {
				bool __ret = managed (field_id, (GLib.Value) Marshal.PtrToStructure (value, typeof (GLib.Value)));
				if (release_on_call)
					gch.Free ();
				return __ret;
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
				return false;
			}
		}

		bool release_on_call = false;
		GCHandle gch;

		public void PersistUntilCalled ()
		{
			release_on_call = true;
			gch = GCHandle.Alloc (this);
		}

		internal StructureFilterMapFuncNative NativeDelegate;
		Gst.StructureFilterMapFunc managed;

		public StructureFilterMapFuncWrapper (Gst.StructureFilterMapFunc managed)
		{
			this.managed = managed;
			if (managed != null)
				NativeDelegate = new StructureFilterMapFuncNative (NativeCallback);
		}

		public static Gst.StructureFilterMapFunc GetManagedDelegate (StructureFilterMapFuncNative native)
		{
			if (native == null)
				return null;
			StructureFilterMapFuncWrapper wrapper = (StructureFilterMapFuncWrapper) native.Target;
			if (wrapper == null)
				return null;
			return wrapper.managed;
		}
	}
#endregion
}
