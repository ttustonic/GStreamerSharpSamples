// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gst {

	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.Runtime.InteropServices;

#region Autogenerated code
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ParentBufferMeta : IEquatable<ParentBufferMeta> {

		public Gst.Meta Parent;
		private IntPtr _buffer;
		public Gst.Buffer Buffer {
			get {
				return _buffer == IntPtr.Zero ? null : (Gst.Buffer) GLib.Opaque.GetOpaque (_buffer, typeof (Gst.Buffer), false);
			}
			set {
				_buffer = value == null ? IntPtr.Zero : value.Handle;
			}
		}

		public static Gst.ParentBufferMeta Zero = new Gst.ParentBufferMeta ();

		public static Gst.ParentBufferMeta New(IntPtr raw) {
			if (raw == IntPtr.Zero)
				return Gst.ParentBufferMeta.Zero;
			return (Gst.ParentBufferMeta) Marshal.PtrToStructure (raw, typeof (Gst.ParentBufferMeta));
		}

		[DllImport("libgstreamer-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gst_parent_buffer_meta_get_info();

		public static Gst.MetaInfo Info { 
			get {
				IntPtr raw_ret = gst_parent_buffer_meta_get_info();
				Gst.MetaInfo ret = Gst.MetaInfo.New (raw_ret);
				return ret;
			}
		}

		public bool Equals (ParentBufferMeta other)
		{
			return true && Parent.Equals (other.Parent) && Buffer.Equals (other.Buffer);
		}

		public override bool Equals (object other)
		{
			return other is ParentBufferMeta && Equals ((ParentBufferMeta) other);
		}

		public override int GetHashCode ()
		{
			return this.GetType ().FullName.GetHashCode () ^ Parent.GetHashCode () ^ Buffer.GetHashCode ();
		}

		private static GLib.GType GType {
			get { return GLib.GType.Pointer; }
		}
#endregion
	}
}
