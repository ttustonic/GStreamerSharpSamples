// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace GstSharp {

	using System;
	using System.Runtime.InteropServices;

#region Autogenerated code
	[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
	internal delegate int IteratorItemFunctionNative(IntPtr it, IntPtr item);

	internal class IteratorItemFunctionInvoker {

		IteratorItemFunctionNative native_cb;
		IntPtr __data;
		GLib.DestroyNotify __notify;

		~IteratorItemFunctionInvoker ()
		{
			if (__notify == null)
				return;
			__notify (__data);
		}

		internal IteratorItemFunctionInvoker (IteratorItemFunctionNative native_cb) : this (native_cb, IntPtr.Zero, null) {}

		internal IteratorItemFunctionInvoker (IteratorItemFunctionNative native_cb, IntPtr data) : this (native_cb, data, null) {}

		internal IteratorItemFunctionInvoker (IteratorItemFunctionNative native_cb, IntPtr data, GLib.DestroyNotify notify)
		{
			this.native_cb = native_cb;
			__data = data;
			__notify = notify;
		}

		internal Gst.IteratorItemFunction Handler {
			get {
				return new Gst.IteratorItemFunction(InvokeNative);
			}
		}

		Gst.IteratorItem InvokeNative (Gst.Iterator it, GLib.Value item)
		{
			IntPtr native_item = GLib.Marshaller.StructureToPtrAlloc (item);
			Gst.IteratorItem __result = (Gst.IteratorItem) native_cb (it == null ? IntPtr.Zero : it.Handle, native_item);
			Marshal.FreeHGlobal (native_item);
			return __result;
		}
	}

	internal class IteratorItemFunctionWrapper {

		public int NativeCallback (IntPtr it, IntPtr item)
		{
			try {
				Gst.IteratorItem __ret = managed (it == IntPtr.Zero ? null : (Gst.Iterator) GLib.Opaque.GetOpaque (it, typeof (Gst.Iterator), false), (GLib.Value) Marshal.PtrToStructure (item, typeof (GLib.Value)));
				if (release_on_call)
					gch.Free ();
				return (int) __ret;
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: Above call does not return.
				throw e;
			}
		}

		bool release_on_call = false;
		GCHandle gch;

		public void PersistUntilCalled ()
		{
			release_on_call = true;
			gch = GCHandle.Alloc (this);
		}

		internal IteratorItemFunctionNative NativeDelegate;
		Gst.IteratorItemFunction managed;

		public IteratorItemFunctionWrapper (Gst.IteratorItemFunction managed)
		{
			this.managed = managed;
			if (managed != null)
				NativeDelegate = new IteratorItemFunctionNative (NativeCallback);
		}

		public static Gst.IteratorItemFunction GetManagedDelegate (IteratorItemFunctionNative native)
		{
			if (native == null)
				return null;
			IteratorItemFunctionWrapper wrapper = (IteratorItemFunctionWrapper) native.Target;
			if (wrapper == null)
				return null;
			return wrapper.managed;
		}
	}
#endregion
}
