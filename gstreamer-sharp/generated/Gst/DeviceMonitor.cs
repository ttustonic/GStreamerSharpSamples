// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gst {

	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public partial class DeviceMonitor : Gst.Object {

		public DeviceMonitor (IntPtr raw) : base(raw) {}

		[DllImport("libgstreamer-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gst_device_monitor_new();

		public DeviceMonitor () : base (IntPtr.Zero)
		{
			if (GetType () != typeof (DeviceMonitor)) {
				CreateNativeObject (new string [0], new GLib.Value[0]);
				return;
			}
			Raw = gst_device_monitor_new();
		}

		[GLib.Property ("show-all")]
		public bool ShowAll {
			get {
				GLib.Value val = GetProperty ("show-all");
				bool ret = (bool) val;
				val.Dispose ();
				return ret;
			}
			set {
				GLib.Value val = new GLib.Value(value);
				SetProperty("show-all", val);
				val.Dispose ();
			}
		}


		// Internal representation of the wrapped structure ABI.
		static GLib.AbiStruct _class_abi = null;
		static public new GLib.AbiStruct class_abi {
			get {
				if (_class_abi == null)
					_class_abi = new GLib.AbiStruct (new List<GLib.AbiField>{ 
						new GLib.AbiField("_gst_reserved"
							, Gst.Object.class_abi.Fields
							, (uint) Marshal.SizeOf(typeof(IntPtr)) * 4 // _gst_reserved
							, null
							, null
							, (uint) Marshal.SizeOf(typeof(IntPtr))
							, 0
							),
					});

				return _class_abi;
			}
		}


		// End of the ABI representation.

		[DllImport("libgstreamer-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gst_device_monitor_get_type();

		public static new GLib.GType GType { 
			get {
				IntPtr raw_ret = gst_device_monitor_get_type();
				GLib.GType ret = new GLib.GType(raw_ret);
				return ret;
			}
		}

		[DllImport("libgstreamer-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern uint gst_device_monitor_add_filter(IntPtr raw, IntPtr classes, IntPtr caps);

		public uint AddFilter(string classes, Gst.Caps caps) {
			IntPtr native_classes = GLib.Marshaller.StringToPtrGStrdup (classes);
			uint raw_ret = gst_device_monitor_add_filter(Handle, native_classes, caps == null ? IntPtr.Zero : caps.Handle);
			uint ret = raw_ret;
			GLib.Marshaller.Free (native_classes);
			return ret;
		}

		public uint AddFilter() {
			return AddFilter (null, null);
		}

		[DllImport("libgstreamer-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gst_device_monitor_get_bus(IntPtr raw);

		public Gst.Bus Bus { 
			get {
				IntPtr raw_ret = gst_device_monitor_get_bus(Handle);
				Gst.Bus ret = GLib.Object.GetObject(raw_ret, true) as Gst.Bus;
				return ret;
			}
		}

		[DllImport("libgstreamer-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gst_device_monitor_get_devices(IntPtr raw);

		public Gst.Device[] Devices { 
			get {
				IntPtr raw_ret = gst_device_monitor_get_devices(Handle);
				Gst.Device[] ret = (Gst.Device[]) GLib.Marshaller.ListPtrToArray (raw_ret, typeof(GLib.List), true, true, typeof(Gst.Device));
				return ret;
			}
		}

		[DllImport("libgstreamer-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gst_device_monitor_get_providers(IntPtr raw);

		public string[] Providers { 
			get {
				IntPtr raw_ret = gst_device_monitor_get_providers(Handle);
				string[] ret = GLib.Marshaller.NullTermPtrToStringArray (raw_ret, true);
				return ret;
			}
		}

		[DllImport("libgstreamer-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gst_device_monitor_get_show_all_devices(IntPtr raw);

		[DllImport("libgstreamer-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gst_device_monitor_set_show_all_devices(IntPtr raw, bool show_all);

		public bool ShowAllDevices { 
			get {
				bool raw_ret = gst_device_monitor_get_show_all_devices(Handle);
				bool ret = raw_ret;
				return ret;
			}
			set {
				gst_device_monitor_set_show_all_devices(Handle, value);
			}
		}

		[DllImport("libgstreamer-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gst_device_monitor_remove_filter(IntPtr raw, uint filter_id);

		public bool RemoveFilter(uint filter_id) {
			bool raw_ret = gst_device_monitor_remove_filter(Handle, filter_id);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libgstreamer-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gst_device_monitor_start(IntPtr raw);

		public bool Start() {
			bool raw_ret = gst_device_monitor_start(Handle);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libgstreamer-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gst_device_monitor_stop(IntPtr raw);

		public void Stop() {
			gst_device_monitor_stop(Handle);
		}


		// Internal representation of the wrapped structure ABI.
		static GLib.AbiStruct _abi_info = null;
		static public new GLib.AbiStruct abi_info {
			get {
				if (_abi_info == null)
					_abi_info = new GLib.AbiStruct (new List<GLib.AbiField>{ 
						new GLib.AbiField("priv"
							, Gst.Object.abi_info.Fields
							, (uint) Marshal.SizeOf(typeof(IntPtr)) // priv
							, null
							, "_gst_reserved"
							, (uint) Marshal.SizeOf(typeof(IntPtr))
							, 0
							),
						new GLib.AbiField("_gst_reserved"
							, -1
							, (uint) Marshal.SizeOf(typeof(IntPtr)) * 4 // _gst_reserved
							, "priv"
							, null
							, (uint) Marshal.SizeOf(typeof(IntPtr))
							, 0
							),
					});

				return _abi_info;
			}
		}


		// End of the ABI representation.

#endregion
	}
}
