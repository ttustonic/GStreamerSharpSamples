// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gst {

	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.Runtime.InteropServices;

#region Autogenerated code
	[StructLayout(LayoutKind.Sequential)]
	public partial struct MapInfo : IEquatable<MapInfo> {

		private IntPtr _memory;
		public Gst.Memory Memory {
			get {
				return _memory == IntPtr.Zero ? null : (Gst.Memory) GLib.Opaque.GetOpaque (_memory, typeof (Gst.Memory), false);
			}
			set {
				_memory = value == null ? IntPtr.Zero : value.Handle;
			}
		}
		public Gst.MapFlags Flags;
		private IntPtr _data;
		private UIntPtr size;
		public ulong Size {
			get {
				return (ulong) size;
			}
			set {
				size = new UIntPtr (value);
			}
		}
		private UIntPtr maxsize;
		public ulong Maxsize {
			get {
				return (ulong) maxsize;
			}
			set {
				maxsize = new UIntPtr (value);
			}
		}
		[MarshalAs (UnmanagedType.ByValArray, SizeConst=4)]
		public IntPtr[] UserData;
		[MarshalAs (UnmanagedType.ByValArray, SizeConst=4)]
		private IntPtr[] _gstGstReserved;

		public static Gst.MapInfo Zero = new Gst.MapInfo ();

		public static Gst.MapInfo New(IntPtr raw) {
			if (raw == IntPtr.Zero)
				return Gst.MapInfo.Zero;
			return (Gst.MapInfo) Marshal.PtrToStructure (raw, typeof (Gst.MapInfo));
		}

		public bool Equals (MapInfo other)
		{
			return true && Memory.Equals (other.Memory) && Flags.Equals (other.Flags) && _data.Equals (other._data) && Size.Equals (other.Size) && Maxsize.Equals (other.Maxsize) && UserData.Equals (other.UserData);
		}

		public override bool Equals (object other)
		{
			return other is MapInfo && Equals ((MapInfo) other);
		}

		public override int GetHashCode ()
		{
			return this.GetType ().FullName.GetHashCode () ^ Memory.GetHashCode () ^ Flags.GetHashCode () ^ _data.GetHashCode () ^ Size.GetHashCode () ^ Maxsize.GetHashCode () ^ UserData.GetHashCode ();
		}

		private static GLib.GType GType {
			get { return GLib.GType.Pointer; }
		}
#endregion
	}
}
