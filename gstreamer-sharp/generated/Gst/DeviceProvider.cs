// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gst {

	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public partial class DeviceProvider : Gst.Object {

		protected DeviceProvider (IntPtr raw) : base(raw) {}

		protected DeviceProvider() : base(IntPtr.Zero)
		{
			CreateNativeObject (new string [0], new GLib.Value [0]);
		}

		[DllImport("libgstreamer-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gst_device_provider_get_devices(IntPtr raw);

		public Gst.Device[] Devices {
			get  {
				IntPtr raw_ret = gst_device_provider_get_devices(Handle);
				Gst.Device[] ret = (Gst.Device[]) GLib.Marshaller.ListPtrToArray (raw_ret, typeof(GLib.List), true, true, typeof(Gst.Device));
				return ret;
			}
		}

		[GLib.Signal("provider-hidden")]
		public event Gst.ProviderHiddenHandler ProviderHidden {
			add {
				this.AddSignalHandler ("provider-hidden", value, typeof (Gst.ProviderHiddenArgs));
			}
			remove {
				this.RemoveSignalHandler ("provider-hidden", value);
			}
		}

		[GLib.Signal("provider-unhidden")]
		public event Gst.ProviderUnhiddenHandler ProviderUnhidden {
			add {
				this.AddSignalHandler ("provider-unhidden", value, typeof (Gst.ProviderUnhiddenArgs));
			}
			remove {
				this.RemoveSignalHandler ("provider-unhidden", value);
			}
		}

		static ProviderHiddenNativeDelegate ProviderHidden_cb_delegate;
		static ProviderHiddenNativeDelegate ProviderHiddenVMCallback {
			get {
				if (ProviderHidden_cb_delegate == null)
					ProviderHidden_cb_delegate = new ProviderHiddenNativeDelegate (ProviderHidden_cb);
				return ProviderHidden_cb_delegate;
			}
		}

		static void OverrideProviderHidden (GLib.GType gtype)
		{
			OverrideProviderHidden (gtype, ProviderHiddenVMCallback);
		}

		static void OverrideProviderHidden (GLib.GType gtype, ProviderHiddenNativeDelegate callback)
		{
			OverrideVirtualMethod (gtype, "provider-hidden", callback);
		}
		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void ProviderHiddenNativeDelegate (IntPtr inst, IntPtr _object);

		static void ProviderHidden_cb (IntPtr inst, IntPtr _object)
		{
			try {
				DeviceProvider __obj = GLib.Object.GetObject (inst, false) as DeviceProvider;
				__obj.OnProviderHidden (GLib.Marshaller.Utf8PtrToString (_object));
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(Gst.DeviceProvider), ConnectionMethod="OverrideProviderHidden")]
		protected virtual void OnProviderHidden (string _object)
		{
			InternalProviderHidden (_object);
		}

		private void InternalProviderHidden (string _object)
		{
			GLib.Value ret = GLib.Value.Empty;
			GLib.ValueArray inst_and_params = new GLib.ValueArray (2);
			GLib.Value[] vals = new GLib.Value [2];
			vals [0] = new GLib.Value (this);
			inst_and_params.Append (vals [0]);
			vals [1] = new GLib.Value (_object);
			inst_and_params.Append (vals [1]);
			g_signal_chain_from_overridden (inst_and_params.ArrayPtr, ref ret);
			foreach (GLib.Value v in vals)
				v.Dispose ();
		}

		static ProviderUnhiddenNativeDelegate ProviderUnhidden_cb_delegate;
		static ProviderUnhiddenNativeDelegate ProviderUnhiddenVMCallback {
			get {
				if (ProviderUnhidden_cb_delegate == null)
					ProviderUnhidden_cb_delegate = new ProviderUnhiddenNativeDelegate (ProviderUnhidden_cb);
				return ProviderUnhidden_cb_delegate;
			}
		}

		static void OverrideProviderUnhidden (GLib.GType gtype)
		{
			OverrideProviderUnhidden (gtype, ProviderUnhiddenVMCallback);
		}

		static void OverrideProviderUnhidden (GLib.GType gtype, ProviderUnhiddenNativeDelegate callback)
		{
			OverrideVirtualMethod (gtype, "provider-unhidden", callback);
		}
		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void ProviderUnhiddenNativeDelegate (IntPtr inst, IntPtr _object);

		static void ProviderUnhidden_cb (IntPtr inst, IntPtr _object)
		{
			try {
				DeviceProvider __obj = GLib.Object.GetObject (inst, false) as DeviceProvider;
				__obj.OnProviderUnhidden (GLib.Marshaller.Utf8PtrToString (_object));
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(Gst.DeviceProvider), ConnectionMethod="OverrideProviderUnhidden")]
		protected virtual void OnProviderUnhidden (string _object)
		{
			InternalProviderUnhidden (_object);
		}

		private void InternalProviderUnhidden (string _object)
		{
			GLib.Value ret = GLib.Value.Empty;
			GLib.ValueArray inst_and_params = new GLib.ValueArray (2);
			GLib.Value[] vals = new GLib.Value [2];
			vals [0] = new GLib.Value (this);
			inst_and_params.Append (vals [0]);
			vals [1] = new GLib.Value (_object);
			inst_and_params.Append (vals [1]);
			g_signal_chain_from_overridden (inst_and_params.ArrayPtr, ref ret);
			foreach (GLib.Value v in vals)
				v.Dispose ();
		}

		static StartNativeDelegate Start_cb_delegate;
		static StartNativeDelegate StartVMCallback {
			get {
				if (Start_cb_delegate == null)
					Start_cb_delegate = new StartNativeDelegate (Start_cb);
				return Start_cb_delegate;
			}
		}

		static void OverrideStart (GLib.GType gtype)
		{
			OverrideStart (gtype, StartVMCallback);
		}

		static void OverrideStart (GLib.GType gtype, StartNativeDelegate callback)
		{
			unsafe {
				IntPtr* raw_ptr = (IntPtr*)(((long) gtype.GetClassPtr()) + (long) class_abi.GetFieldOffset("start"));
				*raw_ptr = Marshal.GetFunctionPointerForDelegate((Delegate) callback);
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate bool StartNativeDelegate (IntPtr inst);

		static bool Start_cb (IntPtr inst)
		{
			try {
				DeviceProvider __obj = GLib.Object.GetObject (inst, false) as DeviceProvider;
				bool __result;
				__result = __obj.OnStart ();
				return __result;
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: above call does not return.
				throw e;
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(Gst.DeviceProvider), ConnectionMethod="OverrideStart")]
		protected virtual bool OnStart ()
		{
			return InternalStart ();
		}

		private bool InternalStart ()
		{
			StartNativeDelegate unmanaged = null;
			unsafe {
				IntPtr* raw_ptr = (IntPtr*)(((long) this.LookupGType().GetThresholdType().GetClassPtr()) + (long) class_abi.GetFieldOffset("start"));
				unmanaged = (StartNativeDelegate) Marshal.GetDelegateForFunctionPointer(*raw_ptr, typeof(StartNativeDelegate));
			}
			if (unmanaged == null) return false;

			bool __result = unmanaged (this.Handle);
			return __result;
		}

		static StopNativeDelegate Stop_cb_delegate;
		static StopNativeDelegate StopVMCallback {
			get {
				if (Stop_cb_delegate == null)
					Stop_cb_delegate = new StopNativeDelegate (Stop_cb);
				return Stop_cb_delegate;
			}
		}

		static void OverrideStop (GLib.GType gtype)
		{
			OverrideStop (gtype, StopVMCallback);
		}

		static void OverrideStop (GLib.GType gtype, StopNativeDelegate callback)
		{
			unsafe {
				IntPtr* raw_ptr = (IntPtr*)(((long) gtype.GetClassPtr()) + (long) class_abi.GetFieldOffset("stop"));
				*raw_ptr = Marshal.GetFunctionPointerForDelegate((Delegate) callback);
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void StopNativeDelegate (IntPtr inst);

		static void Stop_cb (IntPtr inst)
		{
			try {
				DeviceProvider __obj = GLib.Object.GetObject (inst, false) as DeviceProvider;
				__obj.OnStop ();
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(Gst.DeviceProvider), ConnectionMethod="OverrideStop")]
		protected virtual void OnStop ()
		{
			InternalStop ();
		}

		private void InternalStop ()
		{
			StopNativeDelegate unmanaged = null;
			unsafe {
				IntPtr* raw_ptr = (IntPtr*)(((long) this.LookupGType().GetThresholdType().GetClassPtr()) + (long) class_abi.GetFieldOffset("stop"));
				unmanaged = (StopNativeDelegate) Marshal.GetDelegateForFunctionPointer(*raw_ptr, typeof(StopNativeDelegate));
			}
			if (unmanaged == null) return;

			unmanaged (this.Handle);
		}


		// Internal representation of the wrapped structure ABI.
		static GLib.AbiStruct _class_abi = null;
		static public new GLib.AbiStruct class_abi {
			get {
				if (_class_abi == null)
					_class_abi = new GLib.AbiStruct (new List<GLib.AbiField>{ 
						new GLib.AbiField("factory"
							, Gst.Object.class_abi.Fields
							, (uint) Marshal.SizeOf(typeof(IntPtr)) // factory
							, null
							, "probe"
							, (uint) Marshal.SizeOf(typeof(IntPtr))
							, 0
							),
						new GLib.AbiField("probe"
							, -1
							, (uint) Marshal.SizeOf(typeof(IntPtr)) // probe
							, "factory"
							, "start"
							, (uint) Marshal.SizeOf(typeof(IntPtr))
							, 0
							),
						new GLib.AbiField("start"
							, -1
							, (uint) Marshal.SizeOf(typeof(IntPtr)) // start
							, "probe"
							, "stop"
							, (uint) Marshal.SizeOf(typeof(IntPtr))
							, 0
							),
						new GLib.AbiField("stop"
							, -1
							, (uint) Marshal.SizeOf(typeof(IntPtr)) // stop
							, "start"
							, "metadata"
							, (uint) Marshal.SizeOf(typeof(IntPtr))
							, 0
							),
						new GLib.AbiField("metadata"
							, -1
							, (uint) Marshal.SizeOf(typeof(IntPtr)) // metadata
							, "stop"
							, "_gst_reserved"
							, (uint) Marshal.SizeOf(typeof(IntPtr))
							, 0
							),
						new GLib.AbiField("_gst_reserved"
							, -1
							, (uint) Marshal.SizeOf(typeof(IntPtr)) * 4 // _gst_reserved
							, "metadata"
							, null
							, (uint) Marshal.SizeOf(typeof(IntPtr))
							, 0
							),
					});

				return _class_abi;
			}
		}


		// End of the ABI representation.

		[DllImport("libgstreamer-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gst_device_provider_get_type();

		public static new GLib.GType GType { 
			get {
				IntPtr raw_ret = gst_device_provider_get_type();
				GLib.GType ret = new GLib.GType(raw_ret);
				return ret;
			}
		}

		[DllImport("libgstreamer-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gst_device_provider_register(IntPtr plugin, IntPtr name, uint rank, IntPtr type);

		public static bool Register(Gst.Plugin plugin, string name, uint rank, GLib.GType type) {
			IntPtr native_name = GLib.Marshaller.StringToPtrGStrdup (name);
			bool raw_ret = gst_device_provider_register(plugin == null ? IntPtr.Zero : plugin.Handle, native_name, rank, type.Val);
			bool ret = raw_ret;
			GLib.Marshaller.Free (native_name);
			return ret;
		}

		public static bool Register(string name, uint rank, GLib.GType type) {
			return Register (null, name, rank, type);
		}

		[DllImport("libgstreamer-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gst_device_provider_can_monitor(IntPtr raw);

		public bool CanMonitor() {
			bool raw_ret = gst_device_provider_can_monitor(Handle);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libgstreamer-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gst_device_provider_device_add(IntPtr raw, IntPtr device);

		public void DeviceAdd(Gst.Device device) {
			gst_device_provider_device_add(Handle, device == null ? IntPtr.Zero : device.Handle);
		}

		[DllImport("libgstreamer-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gst_device_provider_device_remove(IntPtr raw, IntPtr device);

		public void DeviceRemove(Gst.Device device) {
			gst_device_provider_device_remove(Handle, device == null ? IntPtr.Zero : device.Handle);
		}

		[DllImport("libgstreamer-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gst_device_provider_get_bus(IntPtr raw);

		public Gst.Bus Bus { 
			get {
				IntPtr raw_ret = gst_device_provider_get_bus(Handle);
				Gst.Bus ret = GLib.Object.GetObject(raw_ret, true) as Gst.Bus;
				return ret;
			}
		}

		[DllImport("libgstreamer-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gst_device_provider_get_factory(IntPtr raw);

		public Gst.DeviceProviderFactory Factory { 
			get {
				IntPtr raw_ret = gst_device_provider_get_factory(Handle);
				Gst.DeviceProviderFactory ret = GLib.Object.GetObject(raw_ret) as Gst.DeviceProviderFactory;
				return ret;
			}
		}

		[DllImport("libgstreamer-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gst_device_provider_get_hidden_providers(IntPtr raw);

		public string[] HiddenProviders { 
			get {
				IntPtr raw_ret = gst_device_provider_get_hidden_providers(Handle);
				string[] ret = GLib.Marshaller.NullTermPtrToStringArray (raw_ret, true);
				return ret;
			}
		}

		[DllImport("libgstreamer-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gst_device_provider_get_metadata(IntPtr raw, IntPtr key);

		public string GetMetadata(string key) {
			IntPtr native_key = GLib.Marshaller.StringToPtrGStrdup (key);
			IntPtr raw_ret = gst_device_provider_get_metadata(Handle, native_key);
			string ret = GLib.Marshaller.Utf8PtrToString (raw_ret);
			GLib.Marshaller.Free (native_key);
			return ret;
		}

		[DllImport("libgstreamer-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gst_device_provider_hide_provider(IntPtr raw, IntPtr name);

		public void HideProvider(string name) {
			IntPtr native_name = GLib.Marshaller.StringToPtrGStrdup (name);
			gst_device_provider_hide_provider(Handle, native_name);
			GLib.Marshaller.Free (native_name);
		}

		[DllImport("libgstreamer-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gst_device_provider_start(IntPtr raw);

		public bool Start() {
			bool raw_ret = gst_device_provider_start(Handle);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libgstreamer-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gst_device_provider_stop(IntPtr raw);

		public void Stop() {
			gst_device_provider_stop(Handle);
		}

		[DllImport("libgstreamer-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gst_device_provider_unhide_provider(IntPtr raw, IntPtr name);

		public void UnhideProvider(string name) {
			IntPtr native_name = GLib.Marshaller.StringToPtrGStrdup (name);
			gst_device_provider_unhide_provider(Handle, native_name);
			GLib.Marshaller.Free (native_name);
		}


		// Internal representation of the wrapped structure ABI.
		static GLib.AbiStruct _abi_info = null;
		static public new GLib.AbiStruct abi_info {
			get {
				if (_abi_info == null)
					_abi_info = new GLib.AbiStruct (new List<GLib.AbiField>{ 
						new GLib.AbiField("devices"
							, Gst.Object.abi_info.Fields
							, (uint) Marshal.SizeOf(typeof(IntPtr)) // devices
							, null
							, "priv"
							, (uint) Marshal.SizeOf(typeof(IntPtr))
							, 0
							),
						new GLib.AbiField("priv"
							, -1
							, (uint) Marshal.SizeOf(typeof(IntPtr)) // priv
							, "devices"
							, "_gst_reserved"
							, (uint) Marshal.SizeOf(typeof(IntPtr))
							, 0
							),
						new GLib.AbiField("_gst_reserved"
							, -1
							, (uint) Marshal.SizeOf(typeof(IntPtr)) * 4 // _gst_reserved
							, "priv"
							, null
							, (uint) Marshal.SizeOf(typeof(IntPtr))
							, 0
							),
					});

				return _abi_info;
			}
		}


		// End of the ABI representation.

#endregion
	}
}
