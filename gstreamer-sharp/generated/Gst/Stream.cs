// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gst {

	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public partial class Stream : Gst.Object {

		public Stream (IntPtr raw) : base(raw) {}

		[DllImport("libgstreamer-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gst_stream_new(IntPtr stream_id, IntPtr caps, int type, int flags);

		public Stream (string stream_id, Gst.Caps caps, Gst.StreamType type, Gst.StreamFlags flags) : base (IntPtr.Zero)
		{
			if (GetType () != typeof (Stream)) {
				var vals = new List<GLib.Value> ();
				var names = new List<string> ();
				names.Add ("stream_id");
				vals.Add (new GLib.Value (stream_id));
				if (caps != null) {
					names.Add ("caps");
					vals.Add (new GLib.Value (caps));
				}
				CreateNativeObject (names.ToArray (), vals.ToArray ());
				return;
			}
			IntPtr native_stream_id = GLib.Marshaller.StringToPtrGStrdup (stream_id);
			Raw = gst_stream_new(native_stream_id, caps == null ? IntPtr.Zero : caps.Handle, (int) type, (int) flags);
			GLib.Marshaller.Free (native_stream_id);
		}

		[DllImport("libgstreamer-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gst_stream_get_caps(IntPtr raw);

		[DllImport("libgstreamer-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gst_stream_set_caps(IntPtr raw, IntPtr caps);

		[GLib.Property ("caps")]
		public Gst.Caps Caps {
			get  {
				IntPtr raw_ret = gst_stream_get_caps(Handle);
				Gst.Caps ret = raw_ret == IntPtr.Zero ? null : (Gst.Caps) GLib.Opaque.GetOpaque (raw_ret, typeof (Gst.Caps), true);
				return ret;
			}
			set  {
				gst_stream_set_caps(Handle, value == null ? IntPtr.Zero : value.Handle);
			}
		}

		[DllImport("libgstreamer-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int gst_stream_get_stream_flags(IntPtr raw);

		[DllImport("libgstreamer-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gst_stream_set_stream_flags(IntPtr raw, int flags);

		[GLib.Property ("stream-flags")]
		public Gst.StreamFlags StreamFlags {
			get  {
				int raw_ret = gst_stream_get_stream_flags(Handle);
				Gst.StreamFlags ret = (Gst.StreamFlags) raw_ret;
				return ret;
			}
			set  {
				gst_stream_set_stream_flags(Handle, (int) value);
			}
		}

		[DllImport("libgstreamer-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gst_stream_get_stream_id(IntPtr raw);

		[GLib.Property ("stream-id")]
		public string StreamId {
			get  {
				IntPtr raw_ret = gst_stream_get_stream_id(Handle);
				string ret = GLib.Marshaller.Utf8PtrToString (raw_ret);
				return ret;
			}
		}

		[DllImport("libgstreamer-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int gst_stream_get_stream_type(IntPtr raw);

		[DllImport("libgstreamer-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gst_stream_set_stream_type(IntPtr raw, int stream_type);

		[GLib.Property ("stream-type")]
		public Gst.StreamType StreamType {
			get  {
				int raw_ret = gst_stream_get_stream_type(Handle);
				Gst.StreamType ret = (Gst.StreamType) raw_ret;
				return ret;
			}
			set  {
				gst_stream_set_stream_type(Handle, (int) value);
			}
		}

		[DllImport("libgstreamer-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gst_stream_get_tags(IntPtr raw);

		[DllImport("libgstreamer-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gst_stream_set_tags(IntPtr raw, IntPtr tags);

		[GLib.Property ("tags")]
		public Gst.TagList Tags {
			get  {
				IntPtr raw_ret = gst_stream_get_tags(Handle);
				Gst.TagList ret = raw_ret == IntPtr.Zero ? null : (Gst.TagList) GLib.Opaque.GetOpaque (raw_ret, typeof (Gst.TagList), true);
				return ret;
			}
			set  {
				gst_stream_set_tags(Handle, value == null ? IntPtr.Zero : value.Handle);
			}
		}

		public string StreamIdField {
			get {
				unsafe {
					IntPtr* raw_ptr = (IntPtr*)(((byte*)Handle) + abi_info.GetFieldOffset("stream_id"));
					return GLib.Marshaller.Utf8PtrToString ((*raw_ptr));
				}
			}
		}


		// Internal representation of the wrapped structure ABI.
		static GLib.AbiStruct _class_abi = null;
		static public new GLib.AbiStruct class_abi {
			get {
				if (_class_abi == null)
					_class_abi = new GLib.AbiStruct (new List<GLib.AbiField>{ 
						new GLib.AbiField("_gst_reserved"
							, Gst.Object.class_abi.Fields
							, (uint) Marshal.SizeOf(typeof(IntPtr)) * 4 // _gst_reserved
							, null
							, null
							, (uint) Marshal.SizeOf(typeof(IntPtr))
							, 0
							),
					});

				return _class_abi;
			}
		}


		// End of the ABI representation.

		[DllImport("libgstreamer-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gst_stream_get_type();

		public static new GLib.GType GType { 
			get {
				IntPtr raw_ret = gst_stream_get_type();
				GLib.GType ret = new GLib.GType(raw_ret);
				return ret;
			}
		}


		// Internal representation of the wrapped structure ABI.
		static GLib.AbiStruct _abi_info = null;
		static public new GLib.AbiStruct abi_info {
			get {
				if (_abi_info == null)
					_abi_info = new GLib.AbiStruct (new List<GLib.AbiField>{ 
						new GLib.AbiField("stream_id"
							, Gst.Object.abi_info.Fields
							, (uint) Marshal.SizeOf(typeof(IntPtr)) // stream_id
							, null
							, "priv"
							, (uint) Marshal.SizeOf(typeof(IntPtr))
							, 0
							),
						new GLib.AbiField("priv"
							, -1
							, (uint) Marshal.SizeOf(typeof(IntPtr)) // priv
							, "stream_id"
							, "_gst_reserved"
							, (uint) Marshal.SizeOf(typeof(IntPtr))
							, 0
							),
						new GLib.AbiField("_gst_reserved"
							, -1
							, (uint) Marshal.SizeOf(typeof(IntPtr)) * 4 // _gst_reserved
							, "priv"
							, null
							, (uint) Marshal.SizeOf(typeof(IntPtr))
							, 0
							),
					});

				return _abi_info;
			}
		}


		// End of the ABI representation.

#endregion
	}
}
