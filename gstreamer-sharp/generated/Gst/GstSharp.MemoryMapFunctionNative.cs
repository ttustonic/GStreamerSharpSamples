// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace GstSharp {

	using System;
	using System.Runtime.InteropServices;

#region Autogenerated code
	[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
	internal delegate IntPtr MemoryMapFunctionNative(IntPtr mem, UIntPtr maxsize, int flags);

	internal class MemoryMapFunctionInvoker {

		MemoryMapFunctionNative native_cb;
		IntPtr __data;
		GLib.DestroyNotify __notify;

		~MemoryMapFunctionInvoker ()
		{
			if (__notify == null)
				return;
			__notify (__data);
		}

		internal MemoryMapFunctionInvoker (MemoryMapFunctionNative native_cb) : this (native_cb, IntPtr.Zero, null) {}

		internal MemoryMapFunctionInvoker (MemoryMapFunctionNative native_cb, IntPtr data) : this (native_cb, data, null) {}

		internal MemoryMapFunctionInvoker (MemoryMapFunctionNative native_cb, IntPtr data, GLib.DestroyNotify notify)
		{
			this.native_cb = native_cb;
			__data = data;
			__notify = notify;
		}

		internal Gst.MemoryMapFunction Handler {
			get {
				return new Gst.MemoryMapFunction(InvokeNative);
			}
		}

		IntPtr InvokeNative (Gst.Memory mem, ulong maxsize, Gst.MapFlags flags)
		{
			IntPtr __result = native_cb (mem == null ? IntPtr.Zero : mem.Handle, new UIntPtr (maxsize), (int) flags);
			return __result;
		}
	}

	internal class MemoryMapFunctionWrapper {

		public IntPtr NativeCallback (IntPtr mem, UIntPtr maxsize, int flags)
		{
			try {
				IntPtr __ret = managed (mem == IntPtr.Zero ? null : (Gst.Memory) GLib.Opaque.GetOpaque (mem, typeof (Gst.Memory), false), (ulong) maxsize, (Gst.MapFlags) flags);
				if (release_on_call)
					gch.Free ();
				return __ret;
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: Above call does not return.
				throw e;
			}
		}

		bool release_on_call = false;
		GCHandle gch;

		public void PersistUntilCalled ()
		{
			release_on_call = true;
			gch = GCHandle.Alloc (this);
		}

		internal MemoryMapFunctionNative NativeDelegate;
		Gst.MemoryMapFunction managed;

		public MemoryMapFunctionWrapper (Gst.MemoryMapFunction managed)
		{
			this.managed = managed;
			if (managed != null)
				NativeDelegate = new MemoryMapFunctionNative (NativeCallback);
		}

		public static Gst.MemoryMapFunction GetManagedDelegate (MemoryMapFunctionNative native)
		{
			if (native == null)
				return null;
			MemoryMapFunctionWrapper wrapper = (MemoryMapFunctionWrapper) native.Target;
			if (wrapper == null)
				return null;
			return wrapper.managed;
		}
	}
#endregion
}
