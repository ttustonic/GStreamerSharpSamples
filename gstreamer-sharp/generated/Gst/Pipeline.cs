// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gst {

	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public partial class Pipeline : Gst.Bin {

		public Pipeline (IntPtr raw) : base(raw) {}

		[DllImport("libgstreamer-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gst_pipeline_new(IntPtr name);

		public Pipeline (string name) : base (IntPtr.Zero)
		{
			if (GetType () != typeof (Pipeline)) {
				var vals = new List<GLib.Value> ();
				var names = new List<string> ();
				names.Add ("name");
				vals.Add (new GLib.Value (name));
				CreateNativeObject (names.ToArray (), vals.ToArray ());
				return;
			}
			IntPtr native_name = GLib.Marshaller.StringToPtrGStrdup (name);
			Raw = gst_pipeline_new(native_name);
			GLib.Marshaller.Free (native_name);
		}

		[DllImport("libgstreamer-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gst_pipeline_get_auto_flush_bus(IntPtr raw);

		[DllImport("libgstreamer-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gst_pipeline_set_auto_flush_bus(IntPtr raw, bool auto_flush);

		[GLib.Property ("auto-flush-bus")]
		public bool AutoFlushBus {
			get  {
				bool raw_ret = gst_pipeline_get_auto_flush_bus(Handle);
				bool ret = raw_ret;
				return ret;
			}
			set  {
				gst_pipeline_set_auto_flush_bus(Handle, value);
			}
		}

		[DllImport("libgstreamer-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern ulong gst_pipeline_get_delay(IntPtr raw);

		[DllImport("libgstreamer-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gst_pipeline_set_delay(IntPtr raw, ulong delay);

		[GLib.Property ("delay")]
		public ulong Delay {
			get  {
				ulong raw_ret = gst_pipeline_get_delay(Handle);
				ulong ret = raw_ret;
				return ret;
			}
			set  {
				gst_pipeline_set_delay(Handle, value);
			}
		}

		[DllImport("libgstreamer-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern ulong gst_pipeline_get_latency(IntPtr raw);

		[DllImport("libgstreamer-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gst_pipeline_set_latency(IntPtr raw, ulong latency);

		[GLib.Property ("latency")]
		public ulong Latency {
			get  {
				ulong raw_ret = gst_pipeline_get_latency(Handle);
				ulong ret = raw_ret;
				return ret;
			}
			set  {
				gst_pipeline_set_latency(Handle, value);
			}
		}

		public Gst.Clock FixedClock {
			get {
				unsafe {
					IntPtr* raw_ptr = (IntPtr*)(((byte*)Handle) + abi_info.GetFieldOffset("fixed_clock"));
					return GLib.Object.GetObject((*raw_ptr)) as Gst.Clock;
				}
			}
		}

		public ulong StreamTime {
			get {
				unsafe {
					ulong* raw_ptr = (ulong*)(((byte*)Handle) + abi_info.GetFieldOffset("stream_time"));
					return (*raw_ptr);
				}
			}
		}

		public ulong DelayField {
			get {
				unsafe {
					ulong* raw_ptr = (ulong*)(((byte*)Handle) + abi_info.GetFieldOffset("delay"));
					return (*raw_ptr);
				}
			}
		}


		// Internal representation of the wrapped structure ABI.
		static GLib.AbiStruct _class_abi = null;
		static public new GLib.AbiStruct class_abi {
			get {
				if (_class_abi == null)
					_class_abi = new GLib.AbiStruct (new List<GLib.AbiField>{ 
						new GLib.AbiField("_gst_reserved"
							, Gst.Bin.class_abi.Fields
							, (uint) Marshal.SizeOf(typeof(IntPtr)) * 4 // _gst_reserved
							, null
							, null
							, (uint) Marshal.SizeOf(typeof(IntPtr))
							, 0
							),
					});

				return _class_abi;
			}
		}


		// End of the ABI representation.

		[DllImport("libgstreamer-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gst_pipeline_get_type();

		public static new GLib.GType GType { 
			get {
				IntPtr raw_ret = gst_pipeline_get_type();
				GLib.GType ret = new GLib.GType(raw_ret);
				return ret;
			}
		}

		[DllImport("libgstreamer-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gst_pipeline_auto_clock(IntPtr raw);

		public void AutoClock() {
			gst_pipeline_auto_clock(Handle);
		}

		[DllImport("libgstreamer-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gst_pipeline_get_pipeline_clock(IntPtr raw);

		public Gst.Clock PipelineClock { 
			get {
				IntPtr raw_ret = gst_pipeline_get_pipeline_clock(Handle);
				Gst.Clock ret = GLib.Object.GetObject(raw_ret, true) as Gst.Clock;
				return ret;
			}
		}

		[DllImport("libgstreamer-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gst_pipeline_use_clock(IntPtr raw, IntPtr clock);

		public void UseClock(Gst.Clock clock) {
			gst_pipeline_use_clock(Handle, clock == null ? IntPtr.Zero : clock.Handle);
		}

		public void UseClock() {
			UseClock (null);
		}


		// Internal representation of the wrapped structure ABI.
		static GLib.AbiStruct _abi_info = null;
		static public new GLib.AbiStruct abi_info {
			get {
				if (_abi_info == null)
					_abi_info = new GLib.AbiStruct (new List<GLib.AbiField>{ 
						new GLib.AbiField("fixed_clock"
							, Gst.Bin.abi_info.Fields
							, (uint) Marshal.SizeOf(typeof(IntPtr)) // fixed_clock
							, null
							, "stream_time"
							, (uint) Marshal.SizeOf(typeof(IntPtr))
							, 0
							),
						new GLib.AbiField("stream_time"
							, -1
							, (uint) Marshal.SizeOf(typeof(ulong)) // stream_time
							, "fixed_clock"
							, "delay"
							, (long) Marshal.OffsetOf(typeof(GstPipeline_stream_timeAlign), "stream_time")
							, 0
							),
						new GLib.AbiField("delay"
							, -1
							, (uint) Marshal.SizeOf(typeof(ulong)) // delay
							, "stream_time"
							, "priv"
							, (long) Marshal.OffsetOf(typeof(GstPipeline_delayAlign), "delay")
							, 0
							),
						new GLib.AbiField("priv"
							, -1
							, (uint) Marshal.SizeOf(typeof(IntPtr)) // priv
							, "delay"
							, "_gst_reserved"
							, (uint) Marshal.SizeOf(typeof(IntPtr))
							, 0
							),
						new GLib.AbiField("_gst_reserved"
							, -1
							, (uint) Marshal.SizeOf(typeof(IntPtr)) * 4 // _gst_reserved
							, "priv"
							, null
							, (uint) Marshal.SizeOf(typeof(IntPtr))
							, 0
							),
					});

				return _abi_info;
			}
		}

		[StructLayout(LayoutKind.Sequential)]
		public struct GstPipeline_stream_timeAlign
		{
			sbyte f1;
			private ulong stream_time;
		}

		[StructLayout(LayoutKind.Sequential)]
		public struct GstPipeline_delayAlign
		{
			sbyte f1;
			private ulong delay;
		}


		// End of the ABI representation.

#endregion
	}
}
