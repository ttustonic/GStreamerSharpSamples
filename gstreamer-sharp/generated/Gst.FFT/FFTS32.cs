// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gst.FFT {

	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public partial class FFTS32 : GLib.Opaque {

		[DllImport("libgstfft-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gst_fft_s32_fft(IntPtr raw, int timedata, IntPtr freqdata);

		public void Fft(int timedata, Gst.FFT.FFTS32Complex freqdata) {
			IntPtr native_freqdata = GLib.Marshaller.StructureToPtrAlloc (freqdata);
			gst_fft_s32_fft(Handle, timedata, native_freqdata);
			Marshal.FreeHGlobal (native_freqdata);
		}

		[DllImport("libgstfft-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gst_fft_s32_inverse_fft(IntPtr raw, IntPtr freqdata, int timedata);

		public void InverseFft(Gst.FFT.FFTS32Complex freqdata, int timedata) {
			IntPtr native_freqdata = GLib.Marshaller.StructureToPtrAlloc (freqdata);
			gst_fft_s32_inverse_fft(Handle, native_freqdata, timedata);
			Marshal.FreeHGlobal (native_freqdata);
		}

		[DllImport("libgstfft-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gst_fft_s32_window(IntPtr raw, int timedata, int window);

		public void Window(int timedata, Gst.FFT.FFTWindow window) {
			gst_fft_s32_window(Handle, timedata, (int) window);
		}

		public FFTS32(IntPtr raw) : base(raw) {}

		[DllImport("libgstfft-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gst_fft_s32_free(IntPtr raw);

		protected override void Free (IntPtr raw)
		{
			gst_fft_s32_free (raw);
		}

		class FinalizerInfo {
			IntPtr handle;

			public FinalizerInfo (IntPtr handle)
			{
				this.handle = handle;
			}

			public bool Handler ()
			{
				gst_fft_s32_free (handle);
				return false;
			}
		}

		~FFTS32 ()
		{
			if (!Owned)
				return;
			FinalizerInfo info = new FinalizerInfo (Handle);
			GLib.Timeout.Add (50, new GLib.TimeoutHandler (info.Handler));
		}


		// Internal representation of the wrapped structure ABI.
		static GLib.AbiStruct _abi_info = null;
		static public GLib.AbiStruct abi_info {
			get {
				if (_abi_info == null)
					_abi_info = new GLib.AbiStruct (new List<GLib.AbiField>{ 
					});

				return _abi_info;
			}
		}


		// End of the ABI representation.

#endregion
	}
}
