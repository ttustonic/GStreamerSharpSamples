// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gst.Audio {

	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.Runtime.InteropServices;

#region Autogenerated code
	[StructLayout(LayoutKind.Sequential)]
	public partial struct AudioClippingMeta : IEquatable<AudioClippingMeta> {

		public Gst.Meta Meta;
		public Gst.Format Format;
		public ulong Start;
		public ulong End;

		public static Gst.Audio.AudioClippingMeta Zero = new Gst.Audio.AudioClippingMeta ();

		public static Gst.Audio.AudioClippingMeta New(IntPtr raw) {
			if (raw == IntPtr.Zero)
				return Gst.Audio.AudioClippingMeta.Zero;
			return (Gst.Audio.AudioClippingMeta) Marshal.PtrToStructure (raw, typeof (Gst.Audio.AudioClippingMeta));
		}

		[DllImport("libgstaudio-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gst_audio_clipping_meta_get_info();

		public static Gst.MetaInfo Info { 
			get {
				IntPtr raw_ret = gst_audio_clipping_meta_get_info();
				Gst.MetaInfo ret = Gst.MetaInfo.New (raw_ret);
				return ret;
			}
		}

		public bool Equals (AudioClippingMeta other)
		{
			return true && Meta.Equals (other.Meta) && Format.Equals (other.Format) && Start.Equals (other.Start) && End.Equals (other.End);
		}

		public override bool Equals (object other)
		{
			return other is AudioClippingMeta && Equals ((AudioClippingMeta) other);
		}

		public override int GetHashCode ()
		{
			return this.GetType ().FullName.GetHashCode () ^ Meta.GetHashCode () ^ Format.GetHashCode () ^ Start.GetHashCode () ^ End.GetHashCode ();
		}

		private static GLib.GType GType {
			get { return GLib.GType.Pointer; }
		}
#endregion
	}
}
