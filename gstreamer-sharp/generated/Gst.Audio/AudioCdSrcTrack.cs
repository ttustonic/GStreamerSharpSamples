// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gst.Audio {

	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.Runtime.InteropServices;

#region Autogenerated code
	[StructLayout(LayoutKind.Sequential)]
	public partial struct AudioCdSrcTrack : IEquatable<AudioCdSrcTrack> {

		public bool IsAudio;
		public uint Num;
		public uint Start;
		public uint End;
		private IntPtr _tags;
		public Gst.TagList Tags {
			get {
				return _tags == IntPtr.Zero ? null : (Gst.TagList) GLib.Opaque.GetOpaque (_tags, typeof (Gst.TagList), false);
			}
			set {
				_tags = value == null ? IntPtr.Zero : value.Handle;
			}
		}
		[MarshalAs (UnmanagedType.ByValArray, SizeConst=2)]
		private uint[] _gstGstReserved1;
		[MarshalAs (UnmanagedType.ByValArray, SizeConst=2)]
		private IntPtr[] _gstGstReserved2;

		public static Gst.Audio.AudioCdSrcTrack Zero = new Gst.Audio.AudioCdSrcTrack ();

		public static Gst.Audio.AudioCdSrcTrack New(IntPtr raw) {
			if (raw == IntPtr.Zero)
				return Gst.Audio.AudioCdSrcTrack.Zero;
			return (Gst.Audio.AudioCdSrcTrack) Marshal.PtrToStructure (raw, typeof (Gst.Audio.AudioCdSrcTrack));
		}

		public bool Equals (AudioCdSrcTrack other)
		{
			return true && IsAudio.Equals (other.IsAudio) && Num.Equals (other.Num) && Start.Equals (other.Start) && End.Equals (other.End) && Tags.Equals (other.Tags);
		}

		public override bool Equals (object other)
		{
			return other is AudioCdSrcTrack && Equals ((AudioCdSrcTrack) other);
		}

		public override int GetHashCode ()
		{
			return this.GetType ().FullName.GetHashCode () ^ IsAudio.GetHashCode () ^ Num.GetHashCode () ^ Start.GetHashCode () ^ End.GetHashCode () ^ Tags.GetHashCode ();
		}

		private static GLib.GType GType {
			get { return GLib.GType.Pointer; }
		}
#endregion
	}
}
