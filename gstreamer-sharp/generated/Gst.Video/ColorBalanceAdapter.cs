// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gst.Video {

	using System;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public partial class ColorBalanceAdapter : GLib.GInterfaceAdapter, Gst.Video.IColorBalance {

		[StructLayout (LayoutKind.Sequential)]
		struct GstColorBalanceInterface {
			public ListChannelsNativeDelegate ListChannels;
			public SetValueNativeDelegate SetValue;
			public GetValueNativeDelegate GetValue;
			public GetBalanceTypeNativeDelegate GetBalanceType;
			IntPtr ValueChangedEvent;
			[MarshalAs (UnmanagedType.ByValArray, SizeConst=4)]
			private IntPtr[] _gstGstReserved;
		}

		static GstColorBalanceInterface iface;

		static ColorBalanceAdapter ()
		{
			GLib.GType.Register (_gtype, typeof (ColorBalanceAdapter));
			iface.ListChannels = new ListChannelsNativeDelegate (ListChannels_cb);
			iface.SetValue = new SetValueNativeDelegate (SetValue_cb);
			iface.GetValue = new GetValueNativeDelegate (GetValue_cb);
			iface.GetBalanceType = new GetBalanceTypeNativeDelegate (GetBalanceType_cb);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate IntPtr ListChannelsNativeDelegate (IntPtr inst);

		static IntPtr ListChannels_cb (IntPtr inst)
		{
			try {
				IColorBalanceImplementor __obj = GLib.Object.GetObject (inst, false) as IColorBalanceImplementor;
				Gst.Video.ColorBalanceChannel[] __result;
				__result = __obj.ListChannels ();
				return new GLib.List(__result, typeof (Gst.Video.ColorBalanceChannel), false, false) == null ? IntPtr.Zero : new GLib.List(__result, typeof (Gst.Video.ColorBalanceChannel), false, false).Handle;
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: above call does not return.
				throw e;
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void SetValueNativeDelegate (IntPtr inst, IntPtr channel, int value);

		static void SetValue_cb (IntPtr inst, IntPtr channel, int value)
		{
			try {
				IColorBalanceImplementor __obj = GLib.Object.GetObject (inst, false) as IColorBalanceImplementor;
				__obj.SetValue (GLib.Object.GetObject(channel) as Gst.Video.ColorBalanceChannel, value);
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate int GetValueNativeDelegate (IntPtr inst, IntPtr channel);

		static int GetValue_cb (IntPtr inst, IntPtr channel)
		{
			try {
				IColorBalanceImplementor __obj = GLib.Object.GetObject (inst, false) as IColorBalanceImplementor;
				int __result;
				__result = __obj.GetValue (GLib.Object.GetObject(channel) as Gst.Video.ColorBalanceChannel);
				return __result;
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: above call does not return.
				throw e;
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate int GetBalanceTypeNativeDelegate (IntPtr inst);

		static int GetBalanceType_cb (IntPtr inst)
		{
			try {
				IColorBalanceImplementor __obj = GLib.Object.GetObject (inst, false) as IColorBalanceImplementor;
				Gst.Video.ColorBalanceType __result;
				__result = __obj.BalanceType;
				return (int) __result;
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: above call does not return.
				throw e;
			}
		}

		static int class_offset = 2 * IntPtr.Size;

		static void Initialize (IntPtr ptr, IntPtr data)
		{
			IntPtr ifaceptr = new IntPtr (ptr.ToInt64 () + class_offset);
			GstColorBalanceInterface native_iface = (GstColorBalanceInterface) Marshal.PtrToStructure (ifaceptr, typeof (GstColorBalanceInterface));
			native_iface.ListChannels = iface.ListChannels;
			native_iface.SetValue = iface.SetValue;
			native_iface.GetValue = iface.GetValue;
			native_iface.GetBalanceType = iface.GetBalanceType;
			Marshal.StructureToPtr (native_iface, ifaceptr, false);
		}

		GLib.Object implementor;

		public ColorBalanceAdapter ()
		{
			InitHandler = new GLib.GInterfaceInitHandler (Initialize);
		}

		public ColorBalanceAdapter (IColorBalanceImplementor implementor)
		{
			if (implementor == null)
				throw new ArgumentNullException ("implementor");
			else if (!(implementor is GLib.Object))
				throw new ArgumentException ("implementor must be a subclass of GLib.Object");
			this.implementor = implementor as GLib.Object;
		}

		public ColorBalanceAdapter (IntPtr handle)
		{
			if (!_gtype.IsInstance (handle))
				throw new ArgumentException ("The gobject doesn't implement the GInterface of this adapter", "handle");
			implementor = GLib.Object.GetObject (handle);
		}

		[DllImport("libgstvideo-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gst_color_balance_get_type();

		private static GLib.GType _gtype = new GLib.GType (gst_color_balance_get_type ());

		public static GLib.GType GType {
			get {
				return _gtype;
			}
		}

		public override GLib.GType GInterfaceGType {
			get {
				return _gtype;
			}
		}

		public override IntPtr Handle {
			get {
				return implementor.Handle;
			}
		}

		public IntPtr OwnedHandle {
			get {
				return implementor.OwnedHandle;
			}
		}

		public static IColorBalance GetObject (IntPtr handle, bool owned)
		{
			GLib.Object obj = GLib.Object.GetObject (handle, owned);
			return GetObject (obj);
		}

		public static IColorBalance GetObject (GLib.Object obj)
		{
			if (obj == null)
				return null;
			else if (obj is IColorBalanceImplementor)
				return new ColorBalanceAdapter (obj as IColorBalanceImplementor);
			else if (obj as IColorBalance == null)
				return new ColorBalanceAdapter (obj.Handle);
			else
				return obj as IColorBalance;
		}

		public IColorBalanceImplementor Implementor {
			get {
				return implementor as IColorBalanceImplementor;
			}
		}

		[GLib.Signal("value-changed")]
		public event Gst.Video.ValueChangedEventHandler ValueChangedEvent {
			add {
				GLib.Object.GetObject (Handle).AddSignalHandler ("value-changed", value, typeof (Gst.Video.ValueChangedEventArgs));
			}
			remove {
				GLib.Object.GetObject (Handle).RemoveSignalHandler ("value-changed", value);
			}
		}

		[DllImport("libgstvideo-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int gst_color_balance_get_balance_type(IntPtr raw);

		public Gst.Video.ColorBalanceType BalanceType { 
			get {
				int raw_ret = gst_color_balance_get_balance_type(Handle);
				Gst.Video.ColorBalanceType ret = (Gst.Video.ColorBalanceType) raw_ret;
				return ret;
			}
		}

		[DllImport("libgstvideo-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int gst_color_balance_get_value(IntPtr raw, IntPtr channel);

		public int GetValue(Gst.Video.ColorBalanceChannel channel) {
			int raw_ret = gst_color_balance_get_value(Handle, channel == null ? IntPtr.Zero : channel.Handle);
			int ret = raw_ret;
			return ret;
		}

		[DllImport("libgstvideo-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gst_color_balance_list_channels(IntPtr raw);

		public Gst.Video.ColorBalanceChannel[] ListChannels() {
			IntPtr raw_ret = gst_color_balance_list_channels(Handle);
			Gst.Video.ColorBalanceChannel[] ret = (Gst.Video.ColorBalanceChannel[]) GLib.Marshaller.ListPtrToArray (raw_ret, typeof(GLib.List), false, false, typeof(Gst.Video.ColorBalanceChannel));
			return ret;
		}

		[DllImport("libgstvideo-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gst_color_balance_set_value(IntPtr raw, IntPtr channel, int value);

		public void SetValue(Gst.Video.ColorBalanceChannel channel, int value) {
			gst_color_balance_set_value(Handle, channel == null ? IntPtr.Zero : channel.Handle, value);
		}

		[DllImport("libgstvideo-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gst_color_balance_value_changed(IntPtr raw, IntPtr channel, int value);

		public void ValueChanged(Gst.Video.ColorBalanceChannel channel, int value) {
			gst_color_balance_value_changed(Handle, channel == null ? IntPtr.Zero : channel.Handle, value);
		}

#endregion
	}
}
