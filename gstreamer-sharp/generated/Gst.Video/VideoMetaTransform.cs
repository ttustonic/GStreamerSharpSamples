// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gst.Video {

	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.Runtime.InteropServices;

#region Autogenerated code
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VideoMetaTransform : IEquatable<VideoMetaTransform> {

		private IntPtr _in_info;
		public Gst.Video.VideoInfo InInfo {
			get {
				return _in_info == IntPtr.Zero ? null : (Gst.Video.VideoInfo) GLib.Opaque.GetOpaque (_in_info, typeof (Gst.Video.VideoInfo), false);
			}
			set {
				_in_info = value == null ? IntPtr.Zero : value.Handle;
			}
		}
		private IntPtr _out_info;
		public Gst.Video.VideoInfo OutInfo {
			get {
				return _out_info == IntPtr.Zero ? null : (Gst.Video.VideoInfo) GLib.Opaque.GetOpaque (_out_info, typeof (Gst.Video.VideoInfo), false);
			}
			set {
				_out_info = value == null ? IntPtr.Zero : value.Handle;
			}
		}

		public static Gst.Video.VideoMetaTransform Zero = new Gst.Video.VideoMetaTransform ();

		public static Gst.Video.VideoMetaTransform New(IntPtr raw) {
			if (raw == IntPtr.Zero)
				return Gst.Video.VideoMetaTransform.Zero;
			return (Gst.Video.VideoMetaTransform) Marshal.PtrToStructure (raw, typeof (Gst.Video.VideoMetaTransform));
		}

		[DllImport("libgstvideo-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern uint gst_video_meta_transform_scale_get_quark();

		public static uint ScaleGetQuark() {
			uint raw_ret = gst_video_meta_transform_scale_get_quark();
			uint ret = raw_ret;
			return ret;
		}

		public bool Equals (VideoMetaTransform other)
		{
			return true && InInfo.Equals (other.InInfo) && OutInfo.Equals (other.OutInfo);
		}

		public override bool Equals (object other)
		{
			return other is VideoMetaTransform && Equals ((VideoMetaTransform) other);
		}

		public override int GetHashCode ()
		{
			return this.GetType ().FullName.GetHashCode () ^ InInfo.GetHashCode () ^ OutInfo.GetHashCode ();
		}

		private static GLib.GType GType {
			get { return GLib.GType.Pointer; }
		}
#endregion
	}
}
