// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gst.App {

	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.Runtime.InteropServices;

#region Autogenerated code
	[StructLayout(LayoutKind.Sequential)]
	public partial struct AppSrcCallbacks : IEquatable<AppSrcCallbacks> {

		private IntPtr _need_data;
		private IntPtr _enough_data;
		private IntPtr _seek_data;
		[MarshalAs (UnmanagedType.ByValArray, SizeConst=4)]
		private IntPtr[] _gstGstReserved;

		public static Gst.App.AppSrcCallbacks Zero = new Gst.App.AppSrcCallbacks ();

		public static Gst.App.AppSrcCallbacks New(IntPtr raw) {
			if (raw == IntPtr.Zero)
				return Gst.App.AppSrcCallbacks.Zero;
			return (Gst.App.AppSrcCallbacks) Marshal.PtrToStructure (raw, typeof (Gst.App.AppSrcCallbacks));
		}

		public bool Equals (AppSrcCallbacks other)
		{
			return true && _need_data.Equals (other._need_data) && _enough_data.Equals (other._enough_data) && _seek_data.Equals (other._seek_data);
		}

		public override bool Equals (object other)
		{
			return other is AppSrcCallbacks && Equals ((AppSrcCallbacks) other);
		}

		public override int GetHashCode ()
		{
			return this.GetType ().FullName.GetHashCode () ^ _need_data.GetHashCode () ^ _enough_data.GetHashCode () ^ _seek_data.GetHashCode ();
		}

		private static GLib.GType GType {
			get { return GLib.GType.Pointer; }
		}
#endregion
	}
}
