// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gst.Base {

	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.Runtime.InteropServices;

#region Autogenerated code
	[StructLayout(LayoutKind.Sequential)]
	public partial struct CollectData : IEquatable<CollectData> {

		private IntPtr _collect;
		public Gst.Base.CollectPads Collect {
			get {
				return GLib.Object.GetObject(_collect) as Gst.Base.CollectPads;
			}
			set {
				_collect = value == null ? IntPtr.Zero : value.Handle;
			}
		}
		private IntPtr _pad;
		public Gst.Pad Pad {
			get {
				return GLib.Object.GetObject(_pad) as Gst.Pad;
			}
			set {
				_pad = value == null ? IntPtr.Zero : value.Handle;
			}
		}
		private IntPtr _buffer;
		public Gst.Buffer Buffer {
			get {
				return _buffer == IntPtr.Zero ? null : (Gst.Buffer) GLib.Opaque.GetOpaque (_buffer, typeof (Gst.Buffer), false);
			}
			set {
				_buffer = value == null ? IntPtr.Zero : value.Handle;
			}
		}
		public uint Pos;
		public Gst.Segment Segment;
		private Gst.Base.CollectPadsStateFlags state;
		private IntPtr _priv;

		public static Gst.Base.CollectData Zero = new Gst.Base.CollectData ();

		public static Gst.Base.CollectData New(IntPtr raw) {
			if (raw == IntPtr.Zero)
				return Gst.Base.CollectData.Zero;
			return (Gst.Base.CollectData) Marshal.PtrToStructure (raw, typeof (Gst.Base.CollectData));
		}

		public bool Equals (CollectData other)
		{
			return true && Collect.Equals (other.Collect) && Pad.Equals (other.Pad) && Buffer.Equals (other.Buffer) && Pos.Equals (other.Pos) && Segment.Equals (other.Segment) && state.Equals (other.state) && _priv.Equals (other._priv);
		}

		public override bool Equals (object other)
		{
			return other is CollectData && Equals ((CollectData) other);
		}

		public override int GetHashCode ()
		{
			return this.GetType ().FullName.GetHashCode () ^ Collect.GetHashCode () ^ Pad.GetHashCode () ^ Buffer.GetHashCode () ^ Pos.GetHashCode () ^ Segment.GetHashCode () ^ state.GetHashCode () ^ _priv.GetHashCode ();
		}

		private static GLib.GType GType {
			get { return GLib.GType.Pointer; }
		}
#endregion
	}
}
