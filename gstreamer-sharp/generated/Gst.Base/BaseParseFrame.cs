// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gst.Base {

	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.Runtime.InteropServices;

#region Autogenerated code
	[StructLayout(LayoutKind.Sequential)]
	public partial struct BaseParseFrame : IEquatable<BaseParseFrame> {

		private IntPtr _buffer;
		public Gst.Buffer Buffer {
			get {
				return _buffer == IntPtr.Zero ? null : (Gst.Buffer) GLib.Opaque.GetOpaque (_buffer, typeof (Gst.Buffer), false);
			}
			set {
				_buffer = value == null ? IntPtr.Zero : value.Handle;
			}
		}
		private IntPtr _out_buffer;
		public Gst.Buffer OutBuffer {
			get {
				return _out_buffer == IntPtr.Zero ? null : (Gst.Buffer) GLib.Opaque.GetOpaque (_out_buffer, typeof (Gst.Buffer), false);
			}
			set {
				_out_buffer = value == null ? IntPtr.Zero : value.Handle;
			}
		}
		public uint Flags;
		public ulong Offset;
		public int Overhead;
		private int size;
		[MarshalAs (UnmanagedType.ByValArray, SizeConst=2)]
		private uint[] _gstGstReservedI;
		[MarshalAs (UnmanagedType.ByValArray, SizeConst=2)]
		private IntPtr[] _gstGstReservedP;
		private uint _private_flags;

		public static Gst.Base.BaseParseFrame Zero = new Gst.Base.BaseParseFrame ();

		public static Gst.Base.BaseParseFrame New(IntPtr raw) {
			if (raw == IntPtr.Zero)
				return Gst.Base.BaseParseFrame.Zero;
			return (Gst.Base.BaseParseFrame) Marshal.PtrToStructure (raw, typeof (Gst.Base.BaseParseFrame));
		}

		[DllImport("libgstbase-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gst_base_parse_frame_new(IntPtr buffer, int flags, int overhead);

		public static BaseParseFrame New(Gst.Buffer buffer, Gst.Base.BaseParseFrameFlags flags, int overhead)
		{
			BaseParseFrame result = BaseParseFrame.New (gst_base_parse_frame_new(buffer == null ? IntPtr.Zero : buffer.Handle, (int) flags, overhead));
			return result;
		}

		[DllImport("libgstbase-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gst_base_parse_frame_get_type();

		public static GLib.GType GType { 
			get {
				IntPtr raw_ret = gst_base_parse_frame_get_type();
				GLib.GType ret = new GLib.GType(raw_ret);
				return ret;
			}
		}

		[DllImport("libgstbase-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gst_base_parse_frame_init(IntPtr raw);

		public void Init() {
			IntPtr this_as_native = System.Runtime.InteropServices.Marshal.AllocHGlobal (System.Runtime.InteropServices.Marshal.SizeOf (this));
			System.Runtime.InteropServices.Marshal.StructureToPtr (this, this_as_native, false);
			gst_base_parse_frame_init(this_as_native);
			ReadNative (this_as_native, ref this);
			System.Runtime.InteropServices.Marshal.FreeHGlobal (this_as_native);
		}

		static void ReadNative (IntPtr native, ref Gst.Base.BaseParseFrame target)
		{
			target = New (native);
		}

		public bool Equals (BaseParseFrame other)
		{
			return true && Buffer.Equals (other.Buffer) && OutBuffer.Equals (other.OutBuffer) && Flags.Equals (other.Flags) && Offset.Equals (other.Offset) && Overhead.Equals (other.Overhead) && size.Equals (other.size) && _private_flags.Equals (other._private_flags);
		}

		public override bool Equals (object other)
		{
			return other is BaseParseFrame && Equals ((BaseParseFrame) other);
		}

		public override int GetHashCode ()
		{
			return this.GetType ().FullName.GetHashCode () ^ Buffer.GetHashCode () ^ OutBuffer.GetHashCode () ^ Flags.GetHashCode () ^ Offset.GetHashCode () ^ Overhead.GetHashCode () ^ size.GetHashCode () ^ _private_flags.GetHashCode ();
		}

		public static explicit operator GLib.Value (Gst.Base.BaseParseFrame boxed)
		{
			GLib.Value val = GLib.Value.Empty;
			val.Init (Gst.Base.BaseParseFrame.GType);
			val.Val = boxed;
			return val;
		}

		public static explicit operator Gst.Base.BaseParseFrame (GLib.Value val)
		{
			return (Gst.Base.BaseParseFrame) val.Val;
		}
#endregion
	}
}
