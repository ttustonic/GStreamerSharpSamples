// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gst.Base {

	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public partial class Adapter : GLib.Object {

		public Adapter (IntPtr raw) : base(raw) {}

		[DllImport("libgstbase-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gst_adapter_new();

		public Adapter () : base (IntPtr.Zero)
		{
			if (GetType () != typeof (Adapter)) {
				CreateNativeObject (new string [0], new GLib.Value[0]);
				return;
			}
			Raw = gst_adapter_new();
		}


		// Internal representation of the wrapped structure ABI.
		static GLib.AbiStruct _class_abi = null;
		static public new GLib.AbiStruct class_abi {
			get {
				if (_class_abi == null)
					_class_abi = new GLib.AbiStruct (GLib.Object.class_abi.Fields);

				return _class_abi;
			}
		}


		// End of the ABI representation.

		[DllImport("libgstbase-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gst_adapter_get_type();

		public static new GLib.GType GType { 
			get {
				IntPtr raw_ret = gst_adapter_get_type();
				GLib.GType ret = new GLib.GType(raw_ret);
				return ret;
			}
		}

		[DllImport("libgstbase-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern UIntPtr gst_adapter_available(IntPtr raw);

		public ulong Available() {
			UIntPtr raw_ret = gst_adapter_available(Handle);
			ulong ret = (ulong) raw_ret;
			return ret;
		}

		[DllImport("libgstbase-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern UIntPtr gst_adapter_available_fast(IntPtr raw);

		public ulong AvailableFast() {
			UIntPtr raw_ret = gst_adapter_available_fast(Handle);
			ulong ret = (ulong) raw_ret;
			return ret;
		}

		[DllImport("libgstbase-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gst_adapter_clear(IntPtr raw);

		public void Clear() {
			gst_adapter_clear(Handle);
		}

		[DllImport("libgstbase-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gst_adapter_copy_bytes(IntPtr raw, UIntPtr offset, UIntPtr size);

		public GLib.Bytes CopyBytes(ulong offset, ulong size) {
			IntPtr raw_ret = gst_adapter_copy_bytes(Handle, new UIntPtr (offset), new UIntPtr (size));
			GLib.Bytes ret = new GLib.Bytes(raw_ret);
			return ret;
		}

		[DllImport("libgstbase-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern ulong gst_adapter_distance_from_discont(IntPtr raw);

		public ulong DistanceFromDiscont() {
			ulong raw_ret = gst_adapter_distance_from_discont(Handle);
			ulong ret = raw_ret;
			return ret;
		}

		[DllImport("libgstbase-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern ulong gst_adapter_dts_at_discont(IntPtr raw);

		public ulong DtsAtDiscont() {
			ulong raw_ret = gst_adapter_dts_at_discont(Handle);
			ulong ret = raw_ret;
			return ret;
		}

		[DllImport("libgstbase-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gst_adapter_flush(IntPtr raw, UIntPtr flush);

		public void Flush(ulong flush) {
			gst_adapter_flush(Handle, new UIntPtr (flush));
		}

		[DllImport("libgstbase-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gst_adapter_get_buffer(IntPtr raw, UIntPtr nbytes);

		public Gst.Buffer GetBuffer(ulong nbytes) {
			IntPtr raw_ret = gst_adapter_get_buffer(Handle, new UIntPtr (nbytes));
			Gst.Buffer ret = raw_ret == IntPtr.Zero ? null : (Gst.Buffer) GLib.Opaque.GetOpaque (raw_ret, typeof (Gst.Buffer), true);
			return ret;
		}

		[DllImport("libgstbase-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gst_adapter_get_buffer_fast(IntPtr raw, UIntPtr nbytes);

		public Gst.Buffer GetBufferFast(ulong nbytes) {
			IntPtr raw_ret = gst_adapter_get_buffer_fast(Handle, new UIntPtr (nbytes));
			Gst.Buffer ret = raw_ret == IntPtr.Zero ? null : (Gst.Buffer) GLib.Opaque.GetOpaque (raw_ret, typeof (Gst.Buffer), true);
			return ret;
		}

		[DllImport("libgstbase-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gst_adapter_get_buffer_list(IntPtr raw, UIntPtr nbytes);

		public Gst.BufferList GetBufferList(ulong nbytes) {
			IntPtr raw_ret = gst_adapter_get_buffer_list(Handle, new UIntPtr (nbytes));
			Gst.BufferList ret = raw_ret == IntPtr.Zero ? null : (Gst.BufferList) GLib.Opaque.GetOpaque (raw_ret, typeof (Gst.BufferList), true);
			return ret;
		}

		[DllImport("libgstbase-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gst_adapter_get_list(IntPtr raw, UIntPtr nbytes);

		public GLib.List[] GetList(ulong nbytes) {
			IntPtr raw_ret = gst_adapter_get_list(Handle, new UIntPtr (nbytes));
			GLib.List[] ret = (GLib.List[]) GLib.Marshaller.ListPtrToArray (raw_ret, typeof(GLib.List), true, true, typeof(GLib.List));
			return ret;
		}

		[DllImport("libgstbase-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gst_adapter_masked_scan_uint32(IntPtr raw, uint mask, uint pattern, UIntPtr offset, UIntPtr size);

		public long MaskedScanUint32(uint mask, uint pattern, ulong offset, ulong size) {
			IntPtr raw_ret = gst_adapter_masked_scan_uint32(Handle, mask, pattern, new UIntPtr (offset), new UIntPtr (size));
			long ret = (long) raw_ret;
			return ret;
		}

		[DllImport("libgstbase-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gst_adapter_masked_scan_uint32_peek(IntPtr raw, uint mask, uint pattern, UIntPtr offset, UIntPtr size, out uint value);

		public long MaskedScanUint32Peek(uint mask, uint pattern, ulong offset, ulong size, out uint value) {
			IntPtr raw_ret = gst_adapter_masked_scan_uint32_peek(Handle, mask, pattern, new UIntPtr (offset), new UIntPtr (size), out value);
			long ret = (long) raw_ret;
			return ret;
		}

		[DllImport("libgstbase-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern ulong gst_adapter_offset_at_discont(IntPtr raw);

		public ulong OffsetAtDiscont() {
			ulong raw_ret = gst_adapter_offset_at_discont(Handle);
			ulong ret = raw_ret;
			return ret;
		}

		[DllImport("libgstbase-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern ulong gst_adapter_prev_dts(IntPtr raw, out ulong distance);

		public ulong PrevDts(out ulong distance) {
			ulong raw_ret = gst_adapter_prev_dts(Handle, out distance);
			ulong ret = raw_ret;
			return ret;
		}

		[DllImport("libgstbase-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern ulong gst_adapter_prev_dts_at_offset(IntPtr raw, UIntPtr offset, out ulong distance);

		public ulong PrevDtsAtOffset(ulong offset, out ulong distance) {
			ulong raw_ret = gst_adapter_prev_dts_at_offset(Handle, new UIntPtr (offset), out distance);
			ulong ret = raw_ret;
			return ret;
		}

		[DllImport("libgstbase-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern ulong gst_adapter_prev_offset(IntPtr raw, out ulong distance);

		public ulong PrevOffset(out ulong distance) {
			ulong raw_ret = gst_adapter_prev_offset(Handle, out distance);
			ulong ret = raw_ret;
			return ret;
		}

		[DllImport("libgstbase-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern ulong gst_adapter_prev_pts(IntPtr raw, out ulong distance);

		public ulong PrevPts(out ulong distance) {
			ulong raw_ret = gst_adapter_prev_pts(Handle, out distance);
			ulong ret = raw_ret;
			return ret;
		}

		[DllImport("libgstbase-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern ulong gst_adapter_prev_pts_at_offset(IntPtr raw, UIntPtr offset, out ulong distance);

		public ulong PrevPtsAtOffset(ulong offset, out ulong distance) {
			ulong raw_ret = gst_adapter_prev_pts_at_offset(Handle, new UIntPtr (offset), out distance);
			ulong ret = raw_ret;
			return ret;
		}

		[DllImport("libgstbase-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern ulong gst_adapter_pts_at_discont(IntPtr raw);

		public ulong PtsAtDiscont() {
			ulong raw_ret = gst_adapter_pts_at_discont(Handle);
			ulong ret = raw_ret;
			return ret;
		}

		[DllImport("libgstbase-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gst_adapter_push(IntPtr raw, IntPtr buf);

		public void Push(Gst.Buffer buf) {
			buf.Owned = false;
			gst_adapter_push(Handle, buf == null ? IntPtr.Zero : buf.Handle);
		}

		[DllImport("libgstbase-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gst_adapter_take_buffer(IntPtr raw, UIntPtr nbytes);

		public Gst.Buffer TakeBuffer(ulong nbytes) {
			IntPtr raw_ret = gst_adapter_take_buffer(Handle, new UIntPtr (nbytes));
			Gst.Buffer ret = raw_ret == IntPtr.Zero ? null : (Gst.Buffer) GLib.Opaque.GetOpaque (raw_ret, typeof (Gst.Buffer), true);
			return ret;
		}

		[DllImport("libgstbase-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gst_adapter_take_buffer_fast(IntPtr raw, UIntPtr nbytes);

		public Gst.Buffer TakeBufferFast(ulong nbytes) {
			IntPtr raw_ret = gst_adapter_take_buffer_fast(Handle, new UIntPtr (nbytes));
			Gst.Buffer ret = raw_ret == IntPtr.Zero ? null : (Gst.Buffer) GLib.Opaque.GetOpaque (raw_ret, typeof (Gst.Buffer), true);
			return ret;
		}

		[DllImport("libgstbase-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gst_adapter_take_buffer_list(IntPtr raw, UIntPtr nbytes);

		public Gst.BufferList TakeBufferList(ulong nbytes) {
			IntPtr raw_ret = gst_adapter_take_buffer_list(Handle, new UIntPtr (nbytes));
			Gst.BufferList ret = raw_ret == IntPtr.Zero ? null : (Gst.BufferList) GLib.Opaque.GetOpaque (raw_ret, typeof (Gst.BufferList), true);
			return ret;
		}

		[DllImport("libgstbase-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gst_adapter_take_list(IntPtr raw, UIntPtr nbytes);

		public GLib.List[] TakeList(ulong nbytes) {
			IntPtr raw_ret = gst_adapter_take_list(Handle, new UIntPtr (nbytes));
			GLib.List[] ret = (GLib.List[]) GLib.Marshaller.ListPtrToArray (raw_ret, typeof(GLib.List), true, true, typeof(GLib.List));
			return ret;
		}

		[DllImport("libgstbase-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gst_adapter_unmap(IntPtr raw);

		public void Unmap() {
			gst_adapter_unmap(Handle);
		}


		static Adapter ()
		{
			GtkSharp.GstreamerSharp.ObjectManager.Initialize ();
		}

		// Internal representation of the wrapped structure ABI.
		static GLib.AbiStruct _abi_info = null;
		static public new GLib.AbiStruct abi_info {
			get {
				if (_abi_info == null)
					_abi_info = new GLib.AbiStruct (GLib.Object.abi_info.Fields);

				return _abi_info;
			}
		}


		// End of the ABI representation.

#endregion
	}
}
