// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gst.Base {

	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.Runtime.InteropServices;

#region Autogenerated code
	[StructLayout(LayoutKind.Sequential)]
	public partial struct DataQueueItem : IEquatable<DataQueueItem> {

		private IntPtr _objekt;
		public Gst.MiniObject Object {
			get {
				return _objekt == IntPtr.Zero ? null : (Gst.MiniObject) GLib.Opaque.GetOpaque (_objekt, typeof (Gst.MiniObject), false);
			}
			set {
				_objekt = value == null ? IntPtr.Zero : value.Handle;
			}
		}
		public uint Size;
		public ulong Duration;
		public bool Visible;
		public GLib.DestroyNotify Destroy;
		[MarshalAs (UnmanagedType.ByValArray, SizeConst=4)]
		private IntPtr[] _gstGstReserved;

		public static Gst.Base.DataQueueItem Zero = new Gst.Base.DataQueueItem ();

		public static Gst.Base.DataQueueItem New(IntPtr raw) {
			if (raw == IntPtr.Zero)
				return Gst.Base.DataQueueItem.Zero;
			return (Gst.Base.DataQueueItem) Marshal.PtrToStructure (raw, typeof (Gst.Base.DataQueueItem));
		}

		public bool Equals (DataQueueItem other)
		{
			return true && Object.Equals (other.Object) && Size.Equals (other.Size) && Duration.Equals (other.Duration) && Visible.Equals (other.Visible) && Destroy.Equals (other.Destroy);
		}

		public override bool Equals (object other)
		{
			return other is DataQueueItem && Equals ((DataQueueItem) other);
		}

		public override int GetHashCode ()
		{
			return this.GetType ().FullName.GetHashCode () ^ Object.GetHashCode () ^ Size.GetHashCode () ^ Duration.GetHashCode () ^ Visible.GetHashCode () ^ Destroy.GetHashCode ();
		}

		private static GLib.GType GType {
			get { return GLib.GType.Pointer; }
		}
#endregion
	}
}
