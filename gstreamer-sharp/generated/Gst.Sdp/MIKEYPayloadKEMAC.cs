// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gst.Sdp {

	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.Runtime.InteropServices;

#region Autogenerated code
	[StructLayout(LayoutKind.Sequential)]
	public partial struct MIKEYPayloadKEMAC : IEquatable<MIKEYPayloadKEMAC> {

		private IntPtr _pt;
		public Gst.Sdp.MIKEYPayload Pt {
			get {
				return _pt == IntPtr.Zero ? null : (Gst.Sdp.MIKEYPayload) GLib.Opaque.GetOpaque (_pt, typeof (Gst.Sdp.MIKEYPayload), false);
			}
			set {
				_pt = value == null ? IntPtr.Zero : value.Handle;
			}
		}
		public Gst.Sdp.MIKEYEncAlg EncAlg;
		public Gst.Sdp.MIKEYMacAlg MacAlg;
		private IntPtr SubpayloadsPtr;
		public IntPtr[] Subpayloads {
			get { return GLib.Marshaller.StructArrayFromNullTerminatedIntPtr<IntPtr> (SubpayloadsPtr); }
			set { SubpayloadsPtr = GLib.Marshaller.StructArrayToNullTerminatedStructArrayIntPtr<IntPtr> (value); }
		}

		public static Gst.Sdp.MIKEYPayloadKEMAC Zero = new Gst.Sdp.MIKEYPayloadKEMAC ();

		public static Gst.Sdp.MIKEYPayloadKEMAC New(IntPtr raw) {
			if (raw == IntPtr.Zero)
				return Gst.Sdp.MIKEYPayloadKEMAC.Zero;
			return (Gst.Sdp.MIKEYPayloadKEMAC) Marshal.PtrToStructure (raw, typeof (Gst.Sdp.MIKEYPayloadKEMAC));
		}

		public bool Equals (MIKEYPayloadKEMAC other)
		{
			return true && Pt.Equals (other.Pt) && EncAlg.Equals (other.EncAlg) && MacAlg.Equals (other.MacAlg) && SubpayloadsPtr.Equals (other.SubpayloadsPtr);
		}

		public override bool Equals (object other)
		{
			return other is MIKEYPayloadKEMAC && Equals ((MIKEYPayloadKEMAC) other);
		}

		public override int GetHashCode ()
		{
			return this.GetType ().FullName.GetHashCode () ^ Pt.GetHashCode () ^ EncAlg.GetHashCode () ^ MacAlg.GetHashCode () ^ SubpayloadsPtr.GetHashCode ();
		}

		private static GLib.GType GType {
			get { return GLib.GType.Pointer; }
		}
#endregion
	}
}
