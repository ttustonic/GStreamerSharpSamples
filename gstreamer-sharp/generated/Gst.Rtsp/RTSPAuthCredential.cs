// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gst.Rtsp {

	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.Runtime.InteropServices;

#region Autogenerated code
	[StructLayout(LayoutKind.Sequential)]
	public partial struct RTSPAuthCredential : IEquatable<RTSPAuthCredential> {

		public Gst.Rtsp.RTSPAuthMethod Scheme;
		private IntPtr _parms;

		public Gst.Rtsp.RTSPAuthParam parms {
			get { return Gst.Rtsp.RTSPAuthParam.New (_parms); }
		}
		public string Authorization;

		public static Gst.Rtsp.RTSPAuthCredential Zero = new Gst.Rtsp.RTSPAuthCredential ();

		public static Gst.Rtsp.RTSPAuthCredential New(IntPtr raw) {
			if (raw == IntPtr.Zero)
				return Gst.Rtsp.RTSPAuthCredential.Zero;
			return (Gst.Rtsp.RTSPAuthCredential) Marshal.PtrToStructure (raw, typeof (Gst.Rtsp.RTSPAuthCredential));
		}

		[DllImport("libgstrtsp-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gst_rtsp_auth_credential_get_type();

		public static GLib.GType GType { 
			get {
				IntPtr raw_ret = gst_rtsp_auth_credential_get_type();
				GLib.GType ret = new GLib.GType(raw_ret);
				return ret;
			}
		}

		public bool Equals (RTSPAuthCredential other)
		{
			return true && Scheme.Equals (other.Scheme) && parms.Equals (other.parms) && Authorization.Equals (other.Authorization);
		}

		public override bool Equals (object other)
		{
			return other is RTSPAuthCredential && Equals ((RTSPAuthCredential) other);
		}

		public override int GetHashCode ()
		{
			return this.GetType ().FullName.GetHashCode () ^ Scheme.GetHashCode () ^ parms.GetHashCode () ^ Authorization.GetHashCode ();
		}

		public static explicit operator GLib.Value (Gst.Rtsp.RTSPAuthCredential boxed)
		{
			GLib.Value val = GLib.Value.Empty;
			val.Init (Gst.Rtsp.RTSPAuthCredential.GType);
			val.Val = boxed;
			return val;
		}

		public static explicit operator Gst.Rtsp.RTSPAuthCredential (GLib.Value val)
		{
			return (Gst.Rtsp.RTSPAuthCredential) val.Val;
		}
#endregion
	}
}
